<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://tianjzh.github.io</id>
    <title>Jacky&apos;s小黑屋</title>
    <updated>2020-11-03T02:14:23.762Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://tianjzh.github.io"/>
    <link rel="self" href="https://tianjzh.github.io/atom.xml"/>
    <subtitle>Jacky&apos;s Blog</subtitle>
    <logo>https://tianjzh.github.io/images/avatar.png</logo>
    <icon>https://tianjzh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Jacky&apos;s小黑屋</rights>
    <entry>
        <title type="html"><![CDATA[Vue集成Cesium开发环境搭建]]></title>
        <id>https://tianjzh.github.io/post/vue-ji-cheng-cesium-kai-fa-huan-jing-da-jian-1/</id>
        <link href="https://tianjzh.github.io/post/vue-ji-cheng-cesium-kai-fa-huan-jing-da-jian-1/">
        </link>
        <updated>2020-11-03T01:43:24.000Z</updated>
        <summary type="html"><![CDATA[<p>👇采用Vue.js前端框架，集成Cesium开发环境</p>
]]></summary>
        <content type="html"><![CDATA[<p>👇采用Vue.js前端框架，集成Cesium开发环境</p>
<!-- more -->
<h1 id="一-基础环境安装">一、基础环境安装</h1>
<ul>
<li>node.js （下载：https://nodejs.org/en/）</li>
<li>webpack (全局安装  npm install webpack -g)(检测安装成功: webpack -v)</li>
<li>vue -cli <code>npm install -g @vue/cli</code></li>
</ul>
<h1 id="二-vue项目搭建">二、vue项目搭建</h1>
<h2 id="1-使用vue-cli初始化项目vue_cesium为项目名称">1、使用vue-cli，初始化项目（vue_cesium为项目名称）</h2>
<pre><code class="language-js">vue init webpack vue_cesium
</code></pre>
<p>接下来就是一系列设置</p>
<blockquote>
<p>? Project name vue_cesium</p>
<p>? Project description this is a vue cesium project</p>
<p>? Author JackyTian <a href="mailto:fancyboy0908@163.com">fancyboy0908@163.com</a></p>
<p>? Vue build runtime</p>
<p>? Install vue-router? Yes</p>
<p>? Use ESLint to lint your code? No</p>
<p>? Set up unit tests No</p>
<p>? Setup e2e tests with Nightwatch? No</p>
<p>? Should we run <code>npm install</code> for you after the project has been created? (recommended) npm</p>
</blockquote>
<h2 id="2-安装相关的工具">2 、安装相关的工具</h2>
<p>进入项目根目录</p>
<pre><code class="language-js">npm install
</code></pre>
<h2 id="3-启动">3、启动</h2>
<pre><code class="language-js">npm run dev
</code></pre>
<h1 id="三-cesium环境配置">三、Cesium环境配置</h1>
<h2 id="1-安装cesium">1、安装Cesium</h2>
<pre><code>npm install cesium --save
</code></pre>
<h2 id="2-在build目录下配置webpackbaseconfjs">2、在build目录下，配置webpack.base.conf.js</h2>
<p>1）定义cesium源码路径</p>
<pre><code>const cesiumSource = '../node_modules/cesium/Source'
</code></pre>
<p>2）在module.exports中，output添加sourcePrefix:' '，让webpack正确处理多行字符串</p>
<pre><code class="language-js">output: {
    path: config.build.assetsRoot,
    filename: '[name].js',
    publicPath: process.env.NODE_ENV === 'production'
      ? config.build.assetsPublicPath
      : config.dev.assetsPublicPath,
    sourcePrefix: ' '
},
</code></pre>
<p>3）在output后面，添加amd模式支持</p>
<pre><code class="language-js">output: {...}，
amd: {
  toUrlUndefined: true
},
</code></pre>
<p>4）在resolve中设置cesium别名，引入的时候直接根据别名就可以找到cesium包了</p>
<pre><code class="language-js">resolve: {
    extensions: ['.js', '.vue', '.json'],
    alias: {
      'vue$': 'vue/dist/vue.esm.js',
      '@': resolve('src'),
      'cesium': path.resolve(__dirname, cesiumSource)
    }
},
</code></pre>
<p>5）module里添加unknownContextCritical:false，让webpack打印载入特定库时候告警</p>
<pre><code class="language-js">module: {
   rules: [...],
   unknownContextCritical: false,
   // unknownContextRegExp: /^.\/.*$/,   //这个很多都推荐了，但是实测的时候发现会报错，先不用
},
</code></pre>
<h2 id="3-配置webpackdevconfjs">3、配置webpack.dev.conf.js</h2>
<p>1）配置路径</p>
<pre><code class="language-js">const cesiumSource = 'node_modules/cesium/Source'
const cesiumWorkers = '../Build/Cesium/Workers'
</code></pre>
<p>2）在plugins下面添加如下插件</p>
<pre><code class="language-js">plugins: [
   ...,
    // Copy Cesium Assets, Widgets, and Workers to a static directory
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, cesiumWorkers), to: 'Workers' }]),
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Assets'), to: 'Assets' }]),
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Widgets'), to: 'Widgets' }]),
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'ThirdParty/Workers'), to: 'ThirdParty/Workers' }]),
    new webpack.DefinePlugin({
       // Define relative base path in cesium for loading assets
       CESIUM_BASE_URL: JSON.stringify('')
    })
]
</code></pre>
<h2 id="4-配置webpackprodconfjs文件">4、配置webpack.prod.conf.js文件</h2>
<p>1）配置路径</p>
<pre><code class="language-js">const cesiumSource = 'node_modules/cesium/Source'
const cesiumWorkers = '../Build/Cesium/Workers'
</code></pre>
<p>2）在plugins下面添加如下插件，拷贝静态资源。与dev配置略有不同</p>
<pre><code class="language-js">plugins: [
   ...,
    // Copy Cesium Assets, Widgets, and Workers to a static directory
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, cesiumWorkers), to: 'Workers' }]),
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Assets'), to: 'Assets' }]),
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Widgets'), to: 'Widgets' }]),
    new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'ThirdParty/Workers'), to: 'ThirdParty/Workers' }]),
    new webpack.DefinePlugin({
       // 定义Cesium从哪里加载资源，如果使用默认的''，却变成了绝对路径了，所以这里使用'./'，使用相对路径
       CESIUM_BASE_URL: JSON.stringify('./')
    })
]
</code></pre>
<h2 id="5-修改config里indexjs文件build中的assetspublicpath">5、修改config里index.js文件，build中的assetsPublicPath:&quot;./&quot;</h2>
<pre><code class="language-js">assetsSubDirectory: 'static',
assetsPublicPath: '',
</code></pre>
<h1 id="四-调用cesium">四、调用Cesium</h1>
<h2 id="1-配置mainjs">1、配置main.js</h2>
<pre><code class="language-js">import Vue from 'vue'
import App from './App'
import router from './router'

Vue.config.productionTip = false

// 全局引用Cesium
import * as Cesium from 'cesium/Cesium.js'
import widgets from 'cesium/Widgets/widgets.css'
// 注册全局变量
Vue.prototype.Cesium = Cesium
Vue.prototype.widgets = widgets
Vue.config.productionTip = false

/* eslint-disable no-new */
new Vue({
  el: '#app',
  router,
  render: h =&gt; h(App)
})

</code></pre>
<p>这一步需要尤其注意，Cesium 1.63 版本之前是用的AMD的方式进行编译的，可以采用<code>import Cesium from 'cesium/Cesium'</code>的方式进行引入；但是1.63版时使用ES6进行了重构，1.63之后的版本，导入模块时应该使用如下方式：</p>
<pre><code class="language-js">import * as Cesium from &quot;cesium/Source/Cesium.js&quot;
//或者：
import {Viewer} from &quot;cesium/Source/Cesium.js&quot;
</code></pre>
<h2 id="2-直接在组件中调用">2、直接在组件中调用</h2>
<p>1）新建一个cesiumViewer的组件</p>
<p>src\components\cesiumViewer.vue</p>
<pre><code class="language-html">&lt;template&gt;
    &lt;div id=&quot;cesiumContainer&quot;&gt;&lt;/div&gt;
&lt;/template&gt;


&lt;script&gt;
export default {
  name: 'cesiumViewer',
  data () {
    return {}
  },
  mounted () {
    var viewer = new this.Cesium.Viewer('cesiumContainer')
    viewer._cesiumWidget._creditContainer.style.display = 'none'
  }
}

&lt;/script&gt;


&lt;style scoped&gt;
   #cesiumContainer {
     width: 100%;
     height: 100%;
  }
&lt;/style&gt;
</code></pre>
<p>2）修改App.vue</p>
<pre><code class="language-html">&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;!--    &lt;img src=&quot;./assets/logo.png&quot;&gt;--&gt;
    &lt;!--    &lt;router-view/&gt;--&gt;
    &lt;CesiumViewer&gt;&lt;/CesiumViewer&gt;
  &lt;/div&gt;
&lt;/template&gt;



&lt;script&gt;
import CesiumViewer from './components/cesiumViewer'

export default {
  name: 'App',
  components: {CesiumViewer},
}
&lt;/script&gt;


&lt;style&gt;
html, body {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
}
    
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
&lt;/style&gt;
</code></pre>
<p>3）修改router目录下index文件，注册组件</p>
<pre><code class="language-html">import Vue from 'vue'
import Router from 'vue-router'
import HelloWorld from '@/components/HelloWorld'
//引入页面
import cesiumViewer from '@/components/cesiumViewer'

Vue.use(Router)

export default new Router({
  routes: [
    {
      path: '/',
      name: 'HelloWorld',
      component: HelloWorld
    },
    //注册组件
    {
      path: '/',
      name: 'cesiumViewer',
      component: cesiumViewer
    }
  ]
})
</code></pre>
<p>到此，所有配置全部结束，启动服务即可。<br>
<img src="https://tianjzh.github.io/post-images/1604369447495.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue集成Cesium开发环境搭建测试]]></title>
        <id>https://tianjzh.github.io/post/vue-ji-cheng-cesium-kai-fa-huan-jing-da-jian/</id>
        <link href="https://tianjzh.github.io/post/vue-ji-cheng-cesium-kai-fa-huan-jing-da-jian/">
        </link>
        <updated>2020-11-02T08:00:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-基础环境安装">一、基础环境安装</h1>
<ul>
<li>node.js （下载：https://nodejs.org/en/）</li>
<li>webpack (全局安装  npm install webpack -g)(检测安装成功: webpack -v)</li>
<li>vue -cli <code>npm install -g @vue/cli</code></li>
</ul>
<h1 id="二-vue项目搭建">二、vue项目搭建</h1>
<h2 id="1-使用vue-cli初始化项目vue_cesium为项目名称">1、使用vue-cli，初始化项目（vue_cesium为项目名称）</h2>
<p><code>vue init webpack vue_cesium</code><br>
接下来就是一系列设置<br>
? Project name vue_cesium<br>
? Project description this is a vue cesium project<br>
? Author JackyTian <a href="mailto:fancyboy0908@163.com">fancyboy0908@163.com</a><br>
? Vue build runtime<br>
? Install vue-router? Yes<br>
? Use ESLint to lint your code? No<br>
? Set up unit tests No<br>
? Setup e2e tests with Nightwatch? No<br>
? Should we run <code>npm install</code> for you after the project has been created? (recommended) npm</p>
<h2 id="2-安装相关的工具">2 、安装相关的工具</h2>
<p>进入项目根目录<br>
<code>npm install</code></p>
<h2 id="3-启动">3、启动</h2>
<p><code>npm run dev</code></p>
<h1 id="三-cesium环境配置">三、Cesium环境配置</h1>
<h2 id="1-安装cesium">1、安装Cesium</h2>
<p><code>npm install cesium --save</code></p>
<h2 id="2-在build目录下配置webpackbaseconfjs">2、在build目录下，配置webpack.base.conf.js</h2>
<p>1）定义cesium源码路径<br>
<code>const cesiumSource = '../node_modules/cesium/Source'</code><br>
2）在module.exports中，output添加sourcePrefix:' '，让webpack正确处理多行字符串<br>
<code>output: { path: config.build.assetsRoot, filename: '[name].js', publicPath: process.env.NODE_ENV === 'production' ? config.build.assetsPublicPath : config.dev.assetsPublicPath, sourcePrefix: ' ' },</code><br>
3）在output后面，添加amd模式支持<br>
<code>output: {...}， amd: { toUrlUndefined: true },</code><br>
4）在resolve中设置cesium别名，引入的时候直接根据别名就可以找到cesium包了<br>
<code>resolve: { extensions: ['.js', '.vue', '.json'], alias: { 'vue$': 'vue/dist/vue.esm.js', '@': resolve('src'), 'cesium': path.resolve(__dirname, cesiumSource) } },</code><br>
5）module里添加unknownContextCritical:false，让webpack打印载入特定库时候告警<br>
<code>module: { rules: [...], unknownContextCritical: false, // unknownContextRegExp: /^.\/.*$/, //这个很多都推荐了，但是实测的时候发现会报错，先不用 },</code></p>
<h2 id="3-配置webpackdevconfjs">3、配置webpack.dev.conf.js</h2>
<p>1）配置路径<br>
<code>const cesiumSource = 'node_modules/cesium/Source' const cesiumWorkers = '../Build/Cesium/Workers'</code><br>
2）在plugins下面添加如下插件<br>
<code>plugins: [ ..., // Copy Cesium Assets, Widgets, and Workers to a static directory new CopyWebpackPlugin([{ from: path.join(cesiumSource, cesiumWorkers), to: 'Workers' }]), new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Assets'), to: 'Assets' }]), new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Widgets'), to: 'Widgets' }]), new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'ThirdParty/Workers'), to: 'ThirdParty/Workers' }]), new webpack.DefinePlugin({ // Define relative base path in cesium for loading assets CESIUM_BASE_URL: JSON.stringify('') }) ]</code></p>
<h2 id="4-配置webpackprodconfjs文件">4、配置webpack.prod.conf.js文件</h2>
<p>1）配置路径<br>
<code>const cesiumSource = 'node_modules/cesium/Source' const cesiumWorkers = '../Build/Cesium/Workers'</code><br>
2）在plugins下面添加如下插件，拷贝静态资源。与dev配置略有不同<br>
<code>plugins: [ ..., // Copy Cesium Assets, Widgets, and Workers to a static directory new CopyWebpackPlugin([{ from: path.join(cesiumSource, cesiumWorkers), to: 'Workers' }]), new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Assets'), to: 'Assets' }]), new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'Widgets'), to: 'Widgets' }]), new CopyWebpackPlugin([{ from: path.join(cesiumSource, 'ThirdParty/Workers'), to: 'ThirdParty/Workers' }]), new webpack.DefinePlugin({ // 定义Cesium从哪里加载资源，如果使用默认的''，却变成了绝对路径了，所以这里使用'./'，使用相对路径 CESIUM_BASE_URL: JSON.stringify('./') }) ]</code></p>
<h2 id="5-修改config里indexjs文件build中的assetspublicpath">5、修改config里index.js文件，build中的assetsPublicPath:&quot;./&quot;</h2>
<p><code>assetsSubDirectory: 'static', assetsPublicPath: '',</code></p>
<h1 id="四-调用cesium">四、调用Cesium</h1>
<h2 id="1-配置mainjs">1、配置main.js</h2>
<p>`import Cesium from 'cesium/Cesium'<br>
import widgets from 'cesium/Widgets/widgets.css'</p>
<p>Vue.prototype.Cesium = Cesium<br>
Vue.prototype.widgets = widgets`</p>
<h2 id="2-直接在组件中调用">2、直接在组件中调用</h2>
<p>var Cesium = this.Cesium<br>
Cesium...</p>
<p>新建一个cesiumViewer的组件<br>
src\components\cesiumViewer.vue<br>
`<template><br>
<div id="cesiumContainer"></div><br>
</template></p>
<script>
export default {
  name: 'cesiumViewer',
  data () {
    return {}
  },
  mounted () {
    var viewer = new this.Cesium.Viewer('cesiumContainer')
    viewer._cesiumWidget._creditContainer.style.display = 'none'
  }
}
</script>
<style scoped>
   #cesiumContainer {
    width: 100%;
    height: 100%;
  }

</style>`
<p>修改App.vue<br>
`<template></p>
  <div id="app">
<!--    <img src="./assets/logo.png">-->
<!--    <router-view/>-->
    <CesiumViewer></CesiumViewer>
  </div>
</template>
<script>
import CesiumViewer from './components/cesiumViewer'
export default {
  name: 'App',
  components: {CesiumViewer},
}
</script>
<style>
html, body {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
}
#app {
  font-family: 'Avenir', Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
<p>`</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://tianjzh.github.io/post/hello-gridea/</id>
        <link href="https://tianjzh.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>